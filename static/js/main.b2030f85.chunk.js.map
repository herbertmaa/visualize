{"version":3,"sources":["components/Graphs.js","components/RandomSlider/RandomSlider.js","components/ResultsContainer/ResultsContainer.js","utils/sort.js","components/LinearProgressLabel/LinearProgressLabel.js","components/SortDropDown/SortDropDown.js","App.js","index.js"],"names":["Graph","color","data","style","marginLeft","height","width","marks","value","label","RandomSlider","handleChange","className","Typography","id","gutterBottom","Slider","defaultValue","aria-labelledby","step","min","max","valueLabelDisplay","onChange","ResultsContainer","children","length","map","item","Chip","variant","size","avatar","Avatar","numElements","method","time","bubbleSort","original","arr","JSON","parse","stringify","sorted","answers","numSwaps","i","temp","push","mergeSort","sorter","l","r","m","Math","floor","n1","n2","copy","L","R","j","leftIndex","rightIndex","k","mergeHelper","insertionSort","key","selectionSort","sortedIndex","Infinity","LinearProgressLabel","progress","LinearProgress","display","round","SortDropDown","isDisabled","FormControl","disabled","margin","InputLabel","position","fontSize","shrink","htmlFor","Select","MenuItem","App","generateRandomValues","num","Array","from","element","index","x","y","random","handleClose","event","reason","setOpen","getMethodName","useState","numValues","setNumber","randomData","setRandomValues","originalData","setOriginalData","setProgress","speed","setColor","sorting","setSorting","sortMethod","setSortMethod","open","setTime","results","setResults","changeDisabled","setDisabled","timer","ms","Promise","res","setTimeout","callSortMethod","a","Grid","container","direction","justify","alignItems","spacing","xs","target","rand","Button","onClick","changes","percentageChange","startTime","Date","now","prevProgress","newProgressValue","console","log","delta","prevArr","Snackbar","autoHideDuration","onClose","Alert","severity","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b2030f85.chunk.js","sourcesContent":["import { VerticalBarSeries, XYPlot } from \"react-vis\";\n\nconst Graph = ({ color, data }) => {\n  return (\n    <div style={{ marginLeft: \"25px\" }}>\n      <XYPlot height={250} width={275}>\n        <VerticalBarSeries color={color} data={data} />\n      </XYPlot>\n    </div>\n  );\n};\n\nexport default Graph;\n","import React from \"react\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Slider from \"@material-ui/core/Slider\";\nimport \"./RandomSlider.scss\";\n\nconst marks = [\n  {\n    value: 10,\n    label: \"10\",\n  },\n  {\n    value: 20,\n    label: \"20\",\n  },\n  {\n    value: 30,\n    label: \"30\",\n  },\n  {\n    value: 40,\n    label: \"40\",\n  },\n  {\n    value: 50,\n    label: \"50\",\n  },\n  {\n    value: 60,\n    label: \"60\",\n  },\n  {\n    value: 70,\n    label: \"70\",\n  },\n  {\n    value: 80,\n    label: \"80\",\n  },\n  {\n    value: 90,\n    label: \"90\",\n  },\n  {\n    value: 100,\n    label: \"100\",\n  },\n];\n\nconst RandomSlider = ({ handleChange }) => {\n  return (\n    <div className=\"RandomSlider\">\n      <Typography id=\"discrete-slider-always\" gutterBottom>\n        Generate some random values 🎲\n      </Typography>\n      <Slider\n        defaultValue={50}\n        aria-labelledby=\"discrete-slider-always\"\n        step={10}\n        min={10}\n        max={100}\n        marks={marks}\n        valueLabelDisplay=\"on\"\n        onChange={handleChange}\n      />\n    </div>\n  );\n};\n\nexport default RandomSlider;\n","import React from \"react\";\n\nimport Avatar from \"@material-ui/core/Avatar\";\nimport Chip from \"@material-ui/core/Chip\";\nimport \"./ResultsContainer.scss\";\n\nconst ResultsContainer = ({ children }) => {\n  if (children.length === 0)\n    return (\n      <div className=\"ResultsContainer\">\n        Press \"Sort Me\" to start seeing your results!\n      </div>\n    );\n\n  return (\n    <div className=\"ResultsContainer\">\n      {children.map((item) => (\n        <Chip\n          variant=\"outlined\"\n          size=\"small\"\n          avatar={<Avatar> {item.numElements}</Avatar>}\n          label={item.method + \": \" + item.time + \"ms\"}\n          color=\"primary\"\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default ResultsContainer;\n","/* Different types of sorting methods */\n\nconst bubbleSort = (original) => {\n  let arr = JSON.parse(JSON.stringify(original));\n  let sorted = false;\n\n  let answers = [];\n\n  while (!sorted) {\n    let numSwaps = 0;\n    for (let i = 0; i < arr.length - 1; ++i) {\n      if (arr[i][\"y\"] > arr[i + 1][\"y\"]) {\n        let temp = arr[i + 1][\"y\"];\n        arr[i + 1][\"y\"] = arr[i][\"y\"];\n        arr[i][\"y\"] = temp;\n        numSwaps++;\n        answers.push(JSON.parse(JSON.stringify(arr)));\n      }\n    }\n    if (numSwaps === 0) sorted = true;\n  }\n\n  return answers;\n};\n\nconst mergeSort = (original) => {\n  const mergeHelper = (arr, l, m, r, answers) => {\n    const n1 = m - l + 1;\n    const n2 = r - m;\n\n    const copy = JSON.parse(JSON.stringify(arr));\n\n    // Create temp arrays\n    const L = [];\n    const R = [];\n\n    // Copy data to temp arrays L[] and R[]\n    for (let i = 0; i < n1; i++) {\n      L[i] = copy[l + i];\n    }\n    for (let j = 0; j < n2; j++) {\n      R[j] = copy[m + 1 + j];\n    }\n\n    let leftIndex = 0;\n    let rightIndex = 0;\n    let k = l;\n\n    while (leftIndex < n1 && rightIndex < n2) {\n      if (L[leftIndex][\"y\"] < R[rightIndex][\"y\"]) {\n        arr[k][\"y\"] = L[leftIndex][\"y\"];\n        leftIndex++;\n      } else {\n        arr[k][\"y\"] = R[rightIndex][\"y\"];\n        rightIndex++;\n      }\n      k++;\n    }\n\n    while (leftIndex < n1) {\n      arr[k][\"y\"] = L[leftIndex][\"y\"];\n      leftIndex++;\n      k++;\n    }\n\n    while (rightIndex < n2) {\n      arr[k][\"y\"] = R[rightIndex][\"y\"];\n      rightIndex++;\n      k++;\n    }\n\n    answers.push(JSON.parse(JSON.stringify(arr)));\n  };\n  const sorter = (arr, l, r, answers) => {\n    if (l < r) {\n      const m = Math.floor((l + r) / 2);\n      sorter(arr, l, m, answers);\n      sorter(arr, m + 1, r, answers);\n      mergeHelper(arr, l, m, r, answers);\n    }\n  };\n\n  let arr = JSON.parse(JSON.stringify(original));\n  let answers = [];\n\n  sorter(arr, 0, arr.length - 1, answers);\n  return answers;\n};\n\nconst insertionSort = (original) => {\n  let arr = JSON.parse(JSON.stringify(original));\n  let answers = [];\n\n  for (let i = 1; i < arr.length; i++) {\n    const key = arr[i][\"y\"];\n    let j = i - 1;\n    while (j >= 0 && key < arr[j][\"y\"]) {\n      arr[j + 1][\"y\"] = arr[j][\"y\"];\n      j--;\n      answers.push(JSON.parse(JSON.stringify(arr)));\n    }\n\n    arr[j + 1][\"y\"] = key;\n    answers.push(JSON.parse(JSON.stringify(arr)));\n  }\n\n  return answers;\n};\n\nconst selectionSort = (original) => {\n  let arr = JSON.parse(JSON.stringify(original));\n  let answers = [];\n\n  let sortedIndex = 0;\n  while (sortedIndex < arr.length) {\n    let min = Infinity;\n    for (let i = sortedIndex; i < arr.length; i++) {\n      if (arr[i][\"y\"] < min) {\n        min = arr[i][\"y\"];\n        arr[i][\"y\"] = arr[sortedIndex][\"y\"];\n        arr[sortedIndex][\"y\"] = min;\n        answers.push(JSON.parse(JSON.stringify(arr)));\n      }\n    }\n    sortedIndex++;\n  }\n  return answers;\n};\n\nexport { bubbleSort, mergeSort, insertionSort, selectionSort };\n","import LinearProgress from \"@material-ui/core/LinearProgress\";\nimport \"./LinearProgressLabel.scss\";\n\nconst LinearProgressLabel = ({ progress, value }) => {\n  return (\n    <div className=\"LinearProgressContainer\">\n      <LinearProgress\n        style={{ display: \"inline-block\", width: \"35vw\" }}\n        variant=\"determinate\"\n        value={value}\n      />\n      <p style={{ display: \"inline-block\", marginLeft: \"10px\" }}>\n        {Math.round(progress)} %\n      </p>\n    </div>\n  );\n};\n\nexport default LinearProgressLabel;\n","import FormControl from \"@material-ui/core/FormControl\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Select from \"@material-ui/core/Select\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\n\nconst SortDropDown = ({ isDisabled, handleChange }) => {\n  return (\n    <FormControl\n      disabled={isDisabled}\n      id=\"sort-form-control\"\n      style={{ margin: \"50px\" }}\n    >\n      <InputLabel\n        id=\"sort-form-label\"\n        style={{ position: \"relative\", color: \"black\", fontSize: \"2rem\" }}\n        shrink\n        htmlFor=\"age-native-label-placeholder\"\n      >\n        Sorting Algorithmn\n      </InputLabel>\n\n      <Select id=\"open-sort-select\" onChange={handleChange} defaultValue={0}>\n        <MenuItem value={0}>Bubble Sort</MenuItem>\n        <MenuItem value={1}>Merge Sort</MenuItem>\n        <MenuItem value={2}>Selection Sort</MenuItem>\n        <MenuItem value={3}>Insertion Sort</MenuItem>\n      </Select>\n    </FormControl>\n  );\n};\n\nexport default SortDropDown;\n","import Graph from \"./components/Graphs\";\nimport RandomSlider from \"./components/RandomSlider/RandomSlider\";\nimport React, { useState } from \"react\";\nimport { Button } from \"@material-ui/core\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport Snackbar from \"@material-ui/core/Snackbar\";\nimport ResultsContainer from \"./components/ResultsContainer/ResultsContainer\";\nimport Grid from \"@material-ui/core/Grid\";\n\nimport {\n  bubbleSort,\n  mergeSort,\n  selectionSort,\n  insertionSort,\n} from \"./utils/sort\";\nimport LinearProgressLabel from \"./components/LinearProgressLabel/LinearProgressLabel\";\nimport SortDropDown from \"./components/SortDropDown/SortDropDown\";\n\nconst App = () => {\n  const generateRandomValues = (num) => {\n    return Array.from({ length: num }, (element, index) => {\n      return {\n        x: index,\n        y: Math.floor(Math.random() * 100),\n      };\n    });\n  };\n\n  const handleClose = (event, reason) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n    setOpen(false);\n  };\n\n  const handleChange = (event, value) => {\n    if (value === numValues) return;\n    setNumber(value);\n    setProgress(0);\n\n    const rand = generateRandomValues(value);\n    setRandomValues(rand);\n    setOriginalData(rand);\n    setColor(\"lightBlue\");\n    setSorting(false);\n  };\n\n  const handleSortChange = (event, value) => {\n    setSortMethod(event.target.value);\n    if (sorting === true) {\n      setRandomValues(originalData);\n      setColor(\"lightBlue\");\n      setSorting(false);\n      setProgress(0);\n      setOpen(false);\n    }\n  };\n\n  const getMethodName = (value) => {\n    switch (value) {\n      case 0:\n        return \"Bubble Sort\";\n      case 1:\n        return \"Merge Sort\";\n      case 2:\n        return \"Selection Sort\";\n      case 3:\n        return \"Insertion Sort\";\n      default:\n        return \"Undefined\";\n    }\n  };\n  const [numValues, setNumber] = useState(50);\n  const [randomData, setRandomValues] = useState(generateRandomValues(50));\n  const [originalData, setOriginalData] = useState(randomData);\n  const [progress, setProgress] = useState(0);\n  const [speed, setSpeed] = useState(0.7);\n  const [color, setColor] = useState(\"lightBlue\");\n  const [sorting, setSorting] = useState(false);\n  const [sortMethod, setSortMethod] = useState(0);\n  const [open, setOpen] = useState(false);\n  const [time, setTime] = useState(0);\n  const [results, setResults] = useState([]);\n  const [changeDisabled, setDisabled] = useState(false);\n  //0 is BubbleSort, 1 is MergeSort, 2 is SelectionSort, 3 is InsertionSort\n\n  const timer = (ms) => new Promise((res) => setTimeout(res, ms));\n\n  const callSortMethod = async () => {\n    switch (sortMethod) {\n      case 0:\n        return bubbleSort(randomData);\n      case 1:\n        return mergeSort(randomData);\n      case 2:\n        return selectionSort(randomData);\n      case 3:\n        return insertionSort(randomData);\n      default:\n        return [];\n    }\n  };\n\n  return (\n    <Grid\n      container\n      direction=\"row\"\n      justify=\"flex-start\"\n      alignItems=\"center\"\n      spacing={2}\n    >\n      <Grid style={{ marginLeft: \"20px\" }} item xs={5}>\n        <SortDropDown\n          isDisabled={changeDisabled}\n          handleChange={handleSortChange}\n        ></SortDropDown>\n        <Graph color={color} key=\"graphData\" data={randomData} />\n        <RandomSlider handleChange={handleChange} />\n        <Button\n          style={{ marginLeft: \"50px\" }}\n          variant=\"contained\"\n          color=\"primary\"\n          onClick={async () => {\n            if (sorting) return; // already sorting\n            setDisabled(true);\n            setSorting(true);\n            const changes = await callSortMethod();\n            const percentageChange = 100 / changes.length;\n\n            const startTime = Date.now();\n            for (let i = 0; i < changes.length; ++i) {\n              setRandomValues([...changes[i]]);\n              setTimeout(() => {\n                setProgress((prevProgress) => {\n                  const newProgressValue = prevProgress + percentageChange;\n                  if (newProgressValue >= 99.75) {\n                    setColor(\"lightGreen\");\n                    setOpen(true);\n                    console.log(\"Done sorting\");\n                  }\n                  return newProgressValue;\n                });\n              }, i * speed);\n              await timer(speed);\n            }\n\n            const delta = Date.now() - startTime; // in milliseconds\n            setTime(delta);\n            setDisabled(false);\n            setResults((prevArr) => {\n              return [\n                ...prevArr,\n                {\n                  method: getMethodName(sortMethod),\n                  time: delta,\n                  numElements: numValues,\n                },\n              ];\n            });\n          }}\n        >\n          Sort me!\n        </Button>\n        <LinearProgressLabel value={progress} progress={progress} />\n      </Grid>\n\n      <Grid item xs={4}>\n        <ResultsContainer children={results} />\n      </Grid>\n      <Snackbar open={open} autoHideDuration={3000} onClose={handleClose}>\n        <Alert onClose={handleClose} severity=\"success\">\n          Your input was sorted in {time} ms! 🚀\n        </Alert>\n      </Snackbar>\n    </Grid>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}